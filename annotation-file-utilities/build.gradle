import org.gradle.internal.jvm.Jvm

plugins {
    // https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow (v5 requires Gradle 5)
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
}
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

group 'org.checkerframework'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
sourceSets {
    main.java {
        srcDirs =['src', '../scene-lib/src']
    }
    test.java{
        srcDirs += ['../scene-lib/test']
        include("**/AnnotationsTest.java")
        include("**/foo/*.java")
        include("**/AnnotationVerifier.java")
        include("**/TestSceneLib.java")
    }
    test.resources {
        srcDirs += ['../scene-lib/test']
        exclude("**/*.java")
    }
}
dependencies {
    implementation 'org.plumelib:bcel-util:1.1.4'
    implementation 'org.plumelib:options:1.0.1'
    implementation 'org.plumelib:plume-util:1.0.7'
    implementation 'org.plumelib:signature-util:0.0.6'
    compileOnly 'org.checkerframework:checker-qual:2.5.4'
    implementation 'org.checkerframework:compiler:2.4.0'
    implementation 'com.google.guava:guava:28.0-jre'
    implementation files('../asmx/bin')

    // TODO: the ant build file use a version of junit commited as part of the intial commit.
    // We can probably update this.
    testCompile group: 'junit', name: 'junit', version: '3.8'
    // Change the JDK via -Dorg.gradle.java.home=JDK_PATH
    testCompile files(Jvm.current().toolsJar)
}
task compileAsmx(type:Exec) {
    workingDir '../asmx'
    executable 'ant'
    args = [
            '-Dproduct.noshrink=true',
            'bin'
    ]
}

compileJava {
    dependsOn compileAsmx
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.failOnError = true
    options.deprecation = true
    options.compilerArgs += [
            '-g',
            '-Werror',
            // To not get a warning about missing bootstrap classpath for Java 8 (once we use Java 9).
            "-Xlint:-options",
            "-Xlint:unchecked",
            "-Xlint",
    ]
    options.encoding = 'UTF-8'
}

shadowJar {
    destinationDirectory = projectDir
    archiveVersion = null

    // These appear in annotation-file-utilities-all.jar:
    relocate 'org.apache', 'org.checkerframework.org.apache'
    relocate 'org.relaxng', 'org.checkerframework.org.relaxng'
    relocate 'org.plumelib', 'org.checkerframework.org.plumelib'
    // relocate 'sun', 'org.checkerframework.sun'
    relocate 'org.objectweb.asm', 'org.checkerframework.org.objectweb.asm'
    relocate 'com.google', 'org.checkerframework.com.google'
    relocate 'plume', 'org.checkerframework.plume'
}

test {
    testLogging {
        showStandardStreams = true
        // Always run the tests
        outputs.upToDateWhen { false }

        // Show the found unexpected diagnostics and expected diagnostics not found.
        exceptionFormat "full"
        events "failed"
    }

    // After each test, print a summary.
    afterSuite { desc, result ->
        if (desc.getClassName() != null) {
            long mils = result.getEndTime() - result.getStartTime()
            double seconds = mils / 1000.0

            println "Testsuite: ${desc.getClassName()}\n" +
                    "Tests run: ${result.testCount}, " +
                    "Failures: ${result.failedTestCount}, " +
                    "Skipped: ${result.skippedTestCount}, " +
                    "Time elapsed: ${seconds} sec\n"
        }

    }
}